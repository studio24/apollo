/*------------------------------------*\
    #Forms
\*------------------------------------*/


form {
	background-color: $mercury-grey;
}


/**
Start of resets for the fieldset and legend elements - see
https://thatemil.com/blog/2015/01/03/reset-your-fieldset/
 */
fieldset {
	border: 0;
	margin-bottom: 0;
	margin-left: 0;
	margin-right: 0;
	min-width: 0;
	padding: 0;
}


body:not(:-moz-handler-blocked) fieldset {
	display: table-cell; // Deal with fieldset width in Firefox
}


legend {
	display: table; // Make it line wrap
	padding: 0;
}


/* Any styling that would normally go on `fieldset` should be set on the wrapper instead */
.fieldset-wrapper {
	border: 2px solid;
	border-radius: 0;
	padding: 1em;
	position: relative;
}
/**
End of resets for the fieldset element
 */




/**
Default form styling

1. Make form fields inherit the document styling
 */
input,
select,
textarea {

	background-color: $white-pure;
	border: 2px solid $input-border-color;
	border-radius: 0;
	color: contrast($white);
	display: block;
	font-family: inherit; /* 1 */
	font-size: inherit; /* 1 */
	line-height: inherit; /* 1 */
	// max-width: 32em;
	padding: $size-minus1;
	width: 100%;

	&:hover,
	&:focus,
	&:active {

		background-color: $white;
		border-color: $black;
		outline-offset: 0;

	}

}


/**
We want these inputs to sit a little closer to their corresponding
label for increased usability by visually associating the label to its input.
 */
* {
	+ input,
	+ select,
	+ textarea,
	.field-description,
	.field-error,
	.segmented-group {
		margin-top: $size-minus2;
	}
}




/**
Styling inputs
 */
input[type="checkbox"],
input[type="radio"] {
	display: inline-block;
	margin-right: 0.75em;
	width: auto;
}


select {
	height: 3em;
}


textarea {
	height: 10em;
	resize: vertical;
	// max-width: 32em;
	width: 100%;
}




/**
Memorable date input styles are great for dates that users already know,
such as their date of birth. We always want these fields to line up,
so we use inline-block rather than flexbox.

Making fields like these only as wide as they need to be gives
users a better visual clue as to what is required when completing them.

If you increase the input padding, remember to increase these widths.
 */
.memorable-date {
	display: inline-block;
	margin-top: $size-minus1;
}

.memorable-date + .memorable-date {
	margin-left: $size;
}

.memorable-date__day,
.memorable-date__month {
	width: 3em;
}

.memorable-date__year {
	width: 4.5em;
}




/**
Required fields
 */
input[required],
select[required],
textarea[required] {

	border-color: $input-border-color;
	box-shadow: inset 2px 2px 0 0 $input-border-color,
	inset 2px -2px 0 0 $input-border-color,
	inset -2px -2px 0 0 $input-border-color,
	inset -2px 2px 0 0 $input-border-color;

	&:hover,
	&:focus,
	&:active {

		box-shadow: inset 2px 2px 0 0 $black,
		inset 2px -2px 0 0 $black,
		inset -2px -2px 0 0 $black,
		inset -2px 2px 0 0 $black;

	}

}

input[required]:valid {
	box-shadow: inset 0 0 0 0 $input-border-color;
}




/**
Field grouping
 */
.field + .field,
* + .fieldset-wrapper,
* + .field {
	margin-top: $size-plus2;
}


.field {
	max-width: 32em; // Restrict the measure of the label for readability
	position: relative;
}


.option-group label {
	display: block;
	width: 100%;
}




/**
This goes inside the associated label. By doing it this way we are
associating the help text with the field itself whilst still keeping
a class-hook for styling.
 */
.field-description.field-description {

	color: #666;
	display: block;
	font-size: 0.8em
}


.field-label {
	display: block;
}




/**
Word or character counter with aria
 */
.field-live-region {
	bottom: 1em;
	color: #666;
	font-size: 0.8em;
	margin-top: 0;
	opacity: 0;
	position: absolute;
	right: 1em;
	transition: opacity 100ms ease-in-out 300ms;
}


/**
Fade in live-region on focus. Maybe this should stay visible after
the field has been completed?
 */
.field-input:focus + .field-live-region,
.field-live-region.is-completed {
	opacity: 1;
}




/**
Group inputs to line up side-by-side
 */
.input-group {

	display: flex;
	flex-flow: row nowrap;
	width: 100%;

	input {
		flex: 1 0 auto;
		margin-top: 0;
		width: auto;
	}

	&__button {
		flex: 0 1 auto;
		margin-top: 0;

		.button {
			//margin-left: 0.7em;
			/**
			Make sure button aligns vertically with input field by changing the button padding to match the input
			*/
			padding: #{(0.125em * 2) + 0.75em} 1.5em;
		}

	}

}




/**
Collapsible input grouping
 */
.js-input-collapsible {

	margin-bottom: 0;
	max-height: 0;
	overflow: hidden;
	visibility: hidden;

	&.is-active {
		margin-bottom: 1.5em;
		max-height: none;
		overflow: auto;
		visibility: visible;
	}

}




/**
Shared focus styles for checkboxes and radio buttons
 */
.input--checkbox:focus + .checkbox-label:before,
.input--radio:focus + .radio-label:before,
.input--checkbox:focus + .checkbox-label,
.input--radio:focus + .radio-label {
	background-color: $focus-color;
	color: contrast($focus-color);
	outline: 2px solid $focus-color;
	outline-offset: 0;
}




/**
Shared input styles, gathered here for efficiency
 */
.checkbox-label::after,
.checkbox-label::before,
.radio-label::after,
.radio-label::before,
.segmented-label:after,
.segmented-label:before {
	content: '';
	position: absolute;
}




/**
Checkboxes
 */
.input--checkbox {
	/* Hide the actual checkbox */
	left: -3em;
	position: absolute;
}


.checkbox-group label {
	background-color: inherit;
	cursor: pointer;
	display: block;
	margin-bottom: 1.5em;
	overflow: hidden; //Hide the real checkbox inputs
	padding: 0.5em 0.5em 0.5em #{0.75+2.25em};
	position: relative;
}


* + .checkbox-group label {

	margin-top: $size;

}


/* Box */
.checkbox-label:before {
	background-color: $white-pure;
	border: 2px solid $input-border-color;
	border-radius: 0;
	height: 1.25em;
	left: 0.75em;
	top: 0.75em;
	width: 1.25em;
}


/* Check */
.checkbox-label:after {
	background-color: $white-pure;
	border: 0.2em solid transparent;
	border-width: 0 0.2em 0.2em 0; // creates the inverted "L" shape
	display: block;
	height: 0.75em;
	left: 1.15em;
	top: 0.95em;
	transform: rotate(45deg); // tilts the shape
	width: 0.4em;
}


/* Focused */
.input--checkbox:focus + .checkbox-label:before {
	border-color: $black;
}


/* Checked and Focused */
.input--checkbox:checked:focus + .checkbox-label:before {
	background-color: $black;
	border-color: $black;
}

.input--checkbox:checked:focus + .checkbox-label:after {
	border-color: $white-pure;
}


/* Checked */
.input--checkbox:checked + .checkbox-label:before {
	background-color: $black;
	border-color: $black;
}

.input--checkbox:checked + .checkbox-label:after {
	background: none;
	border-color: $white-pure;
}


/* Hover */
.checkbox-group label:hover .checkbox-label:before {
	border-color: $black !important;
}

.input--checkbox:checked + .checkbox-label:hover:before {
	background-color: #666 !important;
	border-color: #666 !important;
}




/**
Radio buttons
 */
.radio-group input {
	/* Hide the actual radio */
	left: -3em;
	position: absolute;
}


// Wrapper for input and span.radio-label
.radio-group label {
	cursor: pointer;
	display: block;
	line-height: 1.5;
	overflow: hidden; // Hide the real radio inputs
	padding: 0.5em 0.5em 0.5em #{0.75+2.25em};
	position: relative;
}


* + .radio-group label {

	margin-top: $size;

}


.radio-label {
	display: inline-block;
	margin-top: 0;
	max-width: 32em;
}


/* Box */
.radio-label:before {
	background-color: $white-pure;
	border: 2px solid $input-border-color;
	border-radius: 50%;
	height: 1.4em;
	left: 0.75em;
	top: 50%;
	transform: translateY(-50%);
	width: 1.4em;
}


/* Check */
.radio-label:after {
	background-color: $white-pure;
	border-radius: 50%;
	height: 0.7em;
	left: 1.125em;
	top: 50%;
	transform: translateY(-50%);
	width: 0.7em;
}


/* Focused */
.input--radio:focus + .radio-label:before {
	border-color: $black;
}


/* Checked and Focused */
.input--radio:checked:focus + .radio-label:before {
	border-color: #666;
}

.input--radio:checked:focus + .radio-label:after {
	background-color: #666;
}


/* Checked */
.input--radio:checked + .radio-label:before {
	border-color: $black;
}

.input--radio:checked + .radio-label:after {
	background-color: $black;
}


/* Hover */
.radio-group label:hover .radio-label:before {
	border-color: $black !important;
}

.input--radio:checked + .radio-label:hover:before {
	border-color: #666 !important;
}

.input--radio:checked + .radio-label:hover:after {
	background-color: #666 !important;
}




/**
Segmented options. This can be either radio or checkbox, the purpose is to
show all available options outright, rather than hide them behind a <select>
 */
.segmented-group-wrapper,
.no-max-width {
	max-width: none;
}


.segmented-group {
	display: flex;
	flex-flow: row wrap;
}


.segmented-group .input--checkbox,
.segmented-group .input--radio {
	/* Hide the actual checkbox/radio */
	left: -3em;
	position: absolute;
}


// Wrapper for input and div.segmented-label
.segmented-group > label {

	cursor: pointer; // Give it more affordance
	display: block;
	flex: 1 1 33.3333%;
	max-width: 100%;
	min-width: rem(155); // Prevent the options from becoming too narrow to read
	overflow: hidden; // Hide the real radio inputs
	position: relative;

	* {
		max-width: 100%;
	}

}


* + .segmented-group > label {
	margin-top: 0.25em; // Makes it easier for the eye to scan and read options
}


.segmented-label {

	margin: 1.5rem;
	max-width: 32em;

	* {
		position: relative;
		z-index: 3;
	}

	* + * {
		margin-top: $size-minus2;
	}

	:first-child {
		font-size: 1em;
	}

	:not(:first-child) {
		font-size: 0.8em;
	}

}


/* Box */
.segmented-label:before {
	border: 2px solid $input-border-color;
	box-shadow: inset 0 4px 0 rgba($white-pure, 0.2),
	inset 0 4px 0 rgba($black-pure, 0.2);
	height: calc(100% - 4px);
	left: 2px;
	top: 2px;
	width: calc(100% - 4px);
	z-index: 2;
}


/* Check */
.segmented-label:after {
	background-color: transparent;
	border: 0.2em solid white;
	border-width: 0 0.2em 0.2em 0; // creates the inverted "L" shape
	display: block;
	height: 0.75em;
	position: absolute;
	right: 0.75em;
	top: 0.5em;
	transform: scale(0) rotate(-45deg); // don't show the shape until checked
	width: 0.4em;
	z-index: 3;
}


/* Focused */
.input--radio:focus + .segmented-label:before {
	border-color: $black;
	outline: em(2) solid $focus-color;
}


/* Checked and Focused */
.input--radio:checked:focus + .segmented-label:before {
	border-color: lighten($segment-selected-bg-color, 10%);
	box-shadow: inset 0 0.125em 0 0 $grey;
}


/* Checked */
.input--radio:checked + .segmented-label:before {
	background-color: $segment-selected-bg-color;
	color: contrast($segment-selected-bg-color);
	box-shadow: inset 0 0.125em 0 0 darken($segment-selected-bg-color, 10%);
	border-color: darken($segment-selected-bg-color, 10%);
	border-width: em(4);
}

.input--radio:checked + .segmented-label {
	background-color: $segment-selected-bg-color;
	color: contrast($segment-selected-bg-color);
}

.input--radio:checked + .segmented-label:after {
	transform: scale(1) rotate(45deg); // shows and tilts the shape
}


/* Default hover */
.segmented-group label:hover .segmented-label:before {
	box-shadow: inset 0 2px 0 0 darken($segment-selected-bg-color, 10%);
}


/* Checked hover */
.input--radio:checked + .segmented-label:hover:before {
	border-color: #666;
}


/**
Date input
 */
.field-input--date {
	max-width: 12em;
}

/**
Number input
 */
.field-input--number {
	max-width: 6em;
}


/**
Error states
 */
.field--has-error .field-label {

	+ input,
	+ select,
	+ textarea {
		border-radius: 0;
	}

}


.field-error + .segmented-group,
.field-input + .field-error {
	margin-top: 0;
}


.field--has-error input,
.field--has-error select,
.field--has-error textarea {
	border-color: $input-error-color;
	box-shadow: inset 2px 2px 0 0 $input-error-color,
	inset 2px -2px 0 0 $input-error-color,
	inset -2px -2px 0 0 $input-error-color,
	inset -2px 2px 0 0 $input-error-color;
}


// For segmented groups we can't use box-shadow so let's make it a border
.field--has-error .segmented-group {
	border: 4px solid $input-error-color;
}


.field-error:not(:empty) {
	background-color: $input-error-color;
	border-radius:0;
	color: contrast($input-error-color);
	list-style-type: none;
	padding: 1em;
}