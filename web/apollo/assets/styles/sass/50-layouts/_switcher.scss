/*------------------------------------*\
    #Switcher layout primitive

    From https://absolutely.every-layout.dev/layouts/switcher/

    `.l-switcher` switches a Flexbox context between a horizontal and a
    vertical layout at a given, CONTAINER-BASED breakpoint, rather than
    using viewport media queries.

    For example, if our breakpoint is 30rem, the layout will switch to a
    vertical configuration when the parent element is narrower than 30rem.

    The child elements in the horizontal configuration will be of equal
	width, but this can be overridden via the flex-grow property of any
	specific child item(s).

    N.B: For this to work in IE11, there must be no padding on the flex
    items themselves. Instead, apply a margin and/or padding to nested
    elements inside the flex items.

    Nested elements can be given a max-width of 100% to prevent
	their content from causing the flex items to grow.

    The size variable used below defines the desired spacing between
    elements inside `.l-switcher` (currently 1rem). Sizes are defined
    in /10-settings/sizes
\*------------------------------------*/

.l-switcher {
	display: block;
}

/**
1. Multiply by -1 to create negative margins to pull the items back to the
edges.
 */
.l-switcher > * {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	margin: calc(#{$size} / 2 * -1); /* 1 */
}


.l-switcher > * > * {
	/**
	2. Depending on the parsed value of 100%, this will return a positive value
	if the flex container is narrower than 30rem, or a negative value if it's wider.
	This number is then multiplied by 999 to produce either a very large positive
	number or a very large negative number.

	If the calculated flex-basis value is a large positive number, each element
	'maxes out' to take up a whole row.

	If the calculated flex-basis value is a large negative number, then it gets
	dropped because it is invalid, and the value is corrected to 0. Because
	flex-grow is present, each element grows to take up an equal proportion of
	horizontal space.

	3. We apply an even, symmetrical margin to the elements that we wish to space
	out, but halve it to to account for 'doubling up' at the edges.
	 */
	flex-basis: calc((30rem - (100% - #{$size})) * 999 ); /* 2 */
	flex-grow: 1;
	margin: calc(#{$size} / 2); /* 3 */
}


/**
Display the items horizontally above a certain container width, but only if there
are fewer than a certain number of items (3 in this case). Otherwise, switch to
the vertical configuration. This can prevent having too many items squashed into
the horizontal configuration.
 */
.l-switcher > * > :nth-last-child(n+4),
.l-switcher > * > :nth-last-child(n+4) ~ * {
	flex-basis: 100%;
}