/*------------------------------------*\
    #Forms

    Table of content
    - Resetting fieldset & legend
    - Defaults
\*------------------------------------*/

$input-required-color: luma(70) !default;
$input-border-color: luma(70) !default;
$input-error-color: #fed41d !default;
$segment-selected-bg-color: green !default;

/*------------------------------------*\
    #Fieldset+legend wrangler

    fieldset needs to be wrapped in a div
\*------------------------------------*/
fieldset {

    border: 0;
    padding: 0;

    margin-right: 0;
    margin-bottom: 0;
    margin-left: 0;

    // Prevent the default width from taking over.
    min-width: 0;

}

legend {

    padding: 0;
    // Make it line wrap.
    display: table;

}

// Firefox hack to
body:not(:-moz-handler-blocked) fieldset {

    display: table-cell;

}

// Any styling that would normally go on `fieldset` should be set on the wrapper instead
.fieldset-wrapper {

    border: $border;
    padding: 1em;
    border-radius: 0;

    position: relative;

}

/*------------------------------------*\
    #Default form styling
\*------------------------------------*/
label {

    // cursor: pointer;

}

input,
select,
textarea {

    // Make form fields inherit the document styling
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    line-height: inherit;

    display: block;
    width: 100%;
    // max-width: 32em;

    padding: 0.75em 1.5em;

    background: white;
    color: contrast(white);

    border: em(2) solid $input-border-color;
    border-radius: 0;

    &:hover,
    &:focus,
    &:active {

        background-color: luma(97);
        border-color: $primary-color;

    }

    @include transition;
}

/* Axiomatic owl-ish. We want input to sit a little closer to their
 * corresponding label for increased usability by visually associating
 * the label to its input.
 */
* {

    + input,
    + select,
    + textarea,
    .field-description,
    .field-error {

        margin-top: em($font-leading/3);

    }

}

/*------------------------------------*\
    #Styling inputs
\*------------------------------------*/
textarea {

    width: 100%;
    // max-width: 32em;
    height: 10em;
    resize: vertical;

}

select {

    height: 3em;

}

input[type="checkbox"],
input[type="radio"] {

    width: auto;
    display: inline-block;

    margin-right: 0.75em;

}

/*------------------------------------*\
    #Required fields
\*------------------------------------*/
input[required],
select[required],
textarea[required] {

    border-color: $input-required-color;

    box-shadow: inset 2px 2px 0 0 $input-required-color,
    inset 2px -2px 0 0 $input-required-color,
    inset -2px -2px 0 0 $input-required-color,
    inset -2px 2px 0 0 $input-required-color;

    &:hover,
    &:focus,
    &:active {

        box-shadow: inset 2px 2px 0 0 $primary-color,
        inset 2px -2px 0 0 $primary-color,
        inset -2px -2px 0 0 $primary-color,
        inset -2px 2px 0 0 $primary-color;

    }

    @include mq($breakpoint-lap) {

        // box-shadow: inset 0.75em 0 0 0 luma(70);

    }
;

}

input[required]:valid {

    box-shadow: inset 0 0 0 0 $input-required-color;

}

/*------------------------------------*\
    #Field grouping
\*------------------------------------*/
.field-group:not(.group__item) + .field-group:not(.group__item),
* + .fieldset-wrapper,
* + .field-group:not(.group__item) {

    margin-top: 2em;

}
.field-group {

    // margin-bottom: 1.5em;

    // Restrict the measure of the label for readability
    max-width: 32em;
    position: relative;

}

.option-group label {

    display: block;
    width: 100%;

}

/**
 * This goes inside the associated label. By doing it this way we are
 * associating the help text with the field itself whilst still keeping
 * a class-hook for styling.
 */
.field-description {

    // Should be abstracted?
    font-size: 0.88em;
    font-style: italic;
    // luma(30) doesnt have enough contrast
    color: luma(20);

    // margin-bottom: 0.75em;

}

.field-label {

    display: block;
    font-size: 0.9em;
    // margin-bottom: 0.75em;

}

/* Word or character counter with aria
 */
.field-live-region {

    margin-top: 0;

    position: absolute;
    bottom: 1em;
    right: 1em;

    font-size: 0.88em;
    color: luma(20);

    opacity: 0;

    @include transition($property: opacity, $delay: 300ms);

}

/* Fade in live-region on focus. Maybe this should stay visible after
 * one has completed the field?
 */
.field-input:focus + .field-live-region,
.field-live-region.is-completed {

    opacity: 1;

}

/* Group inputs to line up side-by-side */
.input-group {

    width: 100%;
    display: flex;
    flex-flow: row nowrap;

    input {

        margin-top: 0;

        // width: 100%;
        width: auto;
        flex: 1 0 auto;

    }

    &__button {

        margin-top: 0;

        // width: 1%;
        flex: 0 1 auto;

        .button {

            /**
             * Make sure button aligns vertically with input field by changing the button padding to match the input
             *
             */
            padding: #{(0.125em * 2) + 0.75em} 1.5em;

            //margin-left: 0.7em;

        }

    }

}


/*------------------------------------*\
    #Collapsible input grouping
\*------------------------------------*/
.js-input-collapsible {

    max-height: 0;
    overflow: hidden;

    visibility: hidden;

    margin-bottom: 0;

    @include transition;
    transition-property: max-height, visibility;
    transition-delay: 0ms, 150ms;

    &.is-active {

        max-height: 12em;
        overflow: auto;

        visibility: visible;

        margin-bottom: 1.5em;

    }

}

/*------------------------------------*\
    #Checkboxes
\*------------------------------------*/
.input--checkbox {

    /* Hide the actual checkbox */
    position: absolute;
    left: -3em;

}

.checkbox-group label {

    display: block;

    position: relative;
    padding: 0.5em 0.5em 0.5em #{0.75+2.25em};
    background-color: $subtle-color;
    // Remove because we're using axiomatic owl instead
    // margin-bottom: 1.5em;
    cursor: pointer;

    /* Hide the real checkboc inputs */
    overflow: hidden;

}

* + .checkbox-group label {

    margin-top: em($font-leading/3);

}

.checkbox-label:before,
.checkbox-label:after {

    content: '';
    position: absolute;

}

/* Box */
.checkbox-label:before {

    left: 0.75em;
    top: 0.5em;

    width: 1.5em;
    height: 1.5em;

    border: $border;
    border-radius: 0;

    // @include transition;

}

/* Check */
.checkbox-label:after {

    width: 0.75em;
    height: 0.5em;

    border: 2px solid transparent;
    border-width: 0 0 2px 2px;

    top: #{0.375 + 0.5em};
    left: #{0.375 + 0.75em};

    transform: rotate(-45deg);

    // @include transition;

}



.input--checkbox:focus + .checkbox-label:before,
.input--radio:focus + .radio-label:before,
.input--course:focus + .course-label:before,
.input--checkbox:focus + .checkbox-label,
.input--radio:focus + .radio-label,
.input--course:focus + .course-label {

    background-color: $focus-color;
    color: contrast($focus-color);

}



/* Focused */
.input--checkbox:focus + .checkbox-label:before {

    border-color: $primary-color;

}

/* Checked and Focused */
.input--checkbox:checked:focus + .checkbox-label:before {

    background-color: lighten($primary-color, $deviate);
    border-color: lighten($primary-color, $deviate);

}

.input--checkbox:checked:focus + .checkbox-label:after {

    border-color: $white;

}

/* Checked */
.input--checkbox:checked + .checkbox-label:before {

    background-color: $primary-color;
    border-color: $primary-color;

}

.input--checkbox:checked + .checkbox-label:after {

    border-color: $white;

}

/* Hover */
.checkbox-group label:hover .checkbox-label:before {

    border-color: $primary-color !important;

}

.input--checkbox:checked + .checkbox-label:hover:before {

    background-color: lighten($primary-color, $deviate) !important;
    border-color: lighten($primary-color, $deviate) !important;

}

/*------------------------------------*\
    #Radio buttons
\*------------------------------------*/
.radio-group input {

    /* Hide the actual radio */
    position: absolute;
    left: -3em;

}

// Wrapper for input and span.radio-label
.radio-group label {

    display: block;
    line-height: 1.5;

    position: relative;
    padding: 0.5em 0.5em 0.5em #{0.75+2.25em};
    // Remove because we're using axiomatic owl instead
    // margin-bottom: 1.5em;
    cursor: pointer;

    /* Hide the real radio inputs */
    overflow: hidden;

}

* + .radio-group label {

    margin-top: em($font-leading/3);

}

.radio-label {

    margin-top: 0;

    display: inline-block;
    max-width: 32em;

}

.radio-label:before,
.radio-label:after {

    content: '';
    position: absolute;

}

/* Box */
.radio-label:before {

    left: 0.75em;
    top: 0.5em;

    width: 1.5em;
    height: 1.5em;

    border-radius: 50%;

    border: $border;

    // @include transition;

}

/* Check */
.radio-label:after {

    width: 0.75em;
    height: 0.75em;

    border-radius: 50%;

    top: #{0.375 + 0.5em};
    left: #{0.375 + 0.75em};

    // @include transition;

}

/* Focused */
.input--radio:focus + .radio-label:before {

    border-color: $primary-color;

}

/* Checked and Focused */
.input--radio:checked:focus + .radio-label:before {

    // background-color: lighten($primary-color, $deviate);
    border-color: lighten($primary-color, $deviate);

}

.input--radio:checked:focus + .radio-label:after {

    background-color: lighten($primary-color, $deviate);

}

/* Checked */
.input--radio:checked + .radio-label:before {

    // background-color: $primary-color;
    border-color: $primary-color;

}

.input--radio:checked + .radio-label:after {

    background-color: $primary-color;

}

/* Hover */
.radio-group label:hover .radio-label:before {

    border-color: $primary-color !important;

}

.input--radio:checked + .radio-label:hover:before {

    border-color: lighten($primary-color, $deviate) !important;

}

.input--radio:checked + .radio-label:hover:after {

    background-color: lighten($primary-color, $deviate) !important;

}

/*------------------------------------*\
    #Segmented options

    This can either be radio or checkbox, the purpose is to show all available options outright, rather than hide them behind a select
\*------------------------------------*/
.segmented-group-wrapper,
.no-max-width {

    // Remove our default max-width cap
    max-width: none;

}

// Wrapper for
.segmented-group {

    display: flex;
    flex-flow: row wrap;

    @include mq($breakpoint-lap) {

        // flex-flow: row wrap;

    }

}

.segmented-group .input--radio {

    /* Hide the actual radio */
    position: absolute;
    left: -3em;

}

// Wrapper for input and div.segmented-label
.segmented-group > label {

    display: block;
    padding: 1.5em;

    position: relative;

    flex: 1 0 33.3333%;

    // Fix IE11 not wrapping long texts.
    // max-width: 15em;

    /* Hide the real radio inputs */
    overflow: hidden;

    // Give it more affordance
    cursor: pointer;

    // Make it so that all options after 3 becomes secondary giving them less affordance and emphasis
    &:nth-child(1n+4) {

        flex: 1 0 25%;

    }

    &:nth-child(1n+6) {

        //flex: 1 0 50%;

    }

    @include mq($breakpoint-lap) {

        //width: 50%;

    }

    @include mq($breakpoint-desk) {

        //width: 25%;

    }

}

* + .segmented-group > label {
    /**
     * Add more space between rows of segmented options, this makes it easier
     * for the eye to scan and read the options.
     */
    margin-top: 3px;
    // margin-top: 0;

}

.segmented-label {

    margin-top: 0;

    display: inline-block;
    max-width: 32em;

    * {

        position: relative;
        z-index: z("segmented", "label");

    }

}

.segmented-label:before,
.segmented-label:after {

    content: " ";
    position: absolute;

}

.segmented-label:after {

    background-color: transparent;

    width: 1.5em;
    height: 1em;

    border: em(2) solid white;
    border-width: 0 0 em(2) em(2);

    position: absolute;
    top: 1em;
    right: 1.5em;

    z-index: z("segmented", "label");

    @include transition($property: transform);
    transform: scale(0) rotate(45deg);

}

/* Box */
.segmented-label:before {

    left: 2px;
    top: 2px;

    width: calc(100% - 4px);
    height: calc(100% - 4px);

    border-radius: em(4);

    border: em(2) solid luma(60);
    //box-shadow: inset 0 -0.125em 0 0 $grey;
    box-shadow: inset 0 em(4) 0 rgba($white, 0.2),
    inset 0 em(- 4) 0 rgba($black, 0.2);

    z-index: z("segmented", "background");

    // @include transition;

}

/* Focused */
.input--radio:focus + .segmented-label:before {

    border-color: $primary-color;
    outline: em(2) solid $focus-color;

}

/* Checked and Focused */
.input--radio:checked:focus + .segmented-label:before {

    // background-color: lighten($primary-color, $deviate);
    border-color: lighten($segment-selected-bg-color, $deviate);
    box-shadow: inset 0 0.125em 0 0 $grey;

}

.input--radio:checked:focus + .segmented-label:after {

    //background-color: deviate($segment-selected-bg-color);
    //color: contrast(deviate($segment-selected-bg-color));

}

/* Checked */
.input--radio:checked + .segmented-label:before {

    // background-color: $segment-selected-bg-color;
    background-color: $segment-selected-bg-color;
    color: contrast($segment-selected-bg-color);
    box-shadow: inset 0 0.125em 0 0 darken($segment-selected-bg-color, $deviate);
    border-color: darken($segment-selected-bg-color, $deviate);
    border-width: em(4);

}

.input--radio:checked + .segmented-label {

    background-color: $segment-selected-bg-color;
    color: contrast($segment-selected-bg-color);

}

.input--radio:checked + .segmented-label:after {

    transform: scale(1) rotate(-45deg);

    //background-color: $segment-selected-bg-color;
    //color: contrast($segment-selected-bg-color);

}

/* Default hover */
.segmented-group label:hover .segmented-label:before {

    // border-color: $primary-color;
    box-shadow: inset 0 em(2) 0 0 darken($segment-selected-bg-color, $deviate/2);

}

/* Checked hover */
.input--radio:checked + .segmented-label:hover:before {

    border-color: lighten($primary-color, $deviate);

}

/* Checked hover */
.input--radio:checked + .segmented-label:hover:after {

    //background-color: deviate($primary-color);
    //color: contrast(deviate($primary-color));

}

/* Disabled */
.segmented-group label:hover .input--radio:disabled + .segmented-label:before {

    border-color: luma(90);
    box-shadow: none;
    cursor: not-allowed;

}

.input--radio:disabled + .segmented-label:before {

    border-color: luma(90);
    box-shadow: none;

}

.input--radio:disabled + .segmented-label {

    // text-decoration: line-through;
    color: luma(60);

}

.input--radio:disabled + .segmented-label:after {

    content: " ";

    width: 100%;
    height: 100%;

    top: 0;
    left: 0;

    // Still needs work, not possible to get a diagonal line across a dynamically sized box
    background-image: linear-gradient(157.5deg, $white 0%, $white 48%, $segment-selected-bg-color 49%, $segment-selected-bg-color 50%, $white 51%, $white 100%);
    background-size: 100% 100%;
    // color: contrast(luma(90));

}

/*------------------------------------*\
    #Error states
\*------------------------------------*/
* + .field-error {

    margin-top: em($font-leading/3);

}

.field-group--has-error .field-label {

    + input,
    + select,
    + textarea {

        //margin-top: 0;
        border-radius: 0.25em 0.25em 0 0;


    }

}

.field-error + .segmented-group,
.field-input + .field-error {

    margin-top: 0;

}

.field-group--has-error input,
.field-group--has-error select,
.field-group--has-error textarea {

    border-color: $input-error-color;

    box-shadow: inset 2px 2px 0 0 $input-error-color,
    inset 2px -2px 0 0 $input-error-color,
    inset -2px -2px 0 0 $input-error-color,
    inset -2px 2px 0 0 $input-error-color;

}

// For segmented groups we can't use box-shadow so let's make at a border
.field-group--has-error .segmented-group {

    border: 4px solid $input-error-color;

}

.field-error:not(:empty) {

    list-style-type: none;

    background-color: $input-error-color;
    color: contrast($input-error-color);

    padding: 1em;
    border-radius: 0 0 0.25em 0.25em;

}
